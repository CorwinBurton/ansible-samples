---
- name: ec2 playbook
  hosts: localhost
  vars_files:
    - vars.yml
    - vault.yml
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ ec2_region }}"

  tasks:
  # VPC and network tasks
    - name: provision VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ cidr_block }}"
        tags:
          Name: "{{ vpc_name }}"
      register: vpc_facts
    
    - name: Set vpc fact
      set_fact:
        vpc_id: "{{ vpc_facts.vpc.id }}"

    - name: provision subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ public_subnet_1_cidr }}"
        tags:
          Name: "{{ vpc_subnet_tag }}"
      register: subnet_facts
    
    - name: set subnet fact
      set_fact:
        public_subnet_id: "{{ subnet_facts['subnet']['id'] }}"

    - name: Set availability zone fact
      set_fact:
        availability_zone: "{{ subnet_facts['subnet']['availability_zone'] }}"


  # keys
    - name: create key pair
      amazon.aws.ec2_key:
        name: "{{ key_name }}"
        key_material: "{{ lookup('file', '{{ ssh_key_file }}') }}"

  # create security groups

    - name: Create vpc security group
      amazon.aws.ec2_group:
        name: "{{ ec2_security_group }}"
        description: "Default security group that allows all instances in the VPC to talk to each other over any port and protocol."
        vpc_id: "{{ vpc_id }}"
        state: "present"
        rules:
          - proto: "-1"
            from_port: "0"
            to_port: "0"
            group_name: "{{ ec2_security_group }}"
        rules_egress:
          - proto: "-1"
            from_port: "0"
            to_port: "0"
            group_name: "{{ ec2_security_group }}"

    - name: create ingress security group
      amazon.aws.ec2_group:
        name: "{{ ec2_security_group_ingress }}"
        description: "Ingress security group"
        vpc_id: "{{ vpc_id }}"
        state: present
        rules:
          - proto: "tcp"
            from_port: 22
            to_port: 22
            cidr_ip: "0.0.0.0/0"
          - proto: "tcp"
            from_port: 80
            to_port: 80
            cidr_ip: "0.0.0.0/0"
          - proto: "tcp"
            from_port: 443
            to_port: 443
            cidr_ip: "0.0.0.0/0"
        rules_egress:
          - proto: "tcp"
            from_port: 80
            to_port: 80
            cidr_ip: "0.0.0.0/0"
          - proto: "tcp"
            from_port: 443
            to_port: 443
            cidr_ip: "0.0.0.0/0"

    # deploy ec2 instances
    - name: deploy ec2 instances
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        key_name: "{{ key_name }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        security_group: ["{{ ec2_security_group }}","{{ ec2_security_group_ingress }}"]
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_ami }}"
        network:
          assign_public_ip: true
      loop: "{{ ec2_names }}"